<!--
     The FreeBSD Documentation Project

     $FreeBSD: doc/zh_TW.Big5/books/handbook/kernelconfig/chapter.sgml,v 1.4 2008/01/27 16:40:22 chinsan Exp $
     Original revision: 1.180
-->

<chapter id="kernelconfig">
  <chapterinfo>
    <authorgroup>
      <author>
	<firstname>Jim</firstname>
	<surname>Mock</surname>
	<contrib>更新、重排：</contrib>
	<!-- Mar 2000 -->
      </author>
    </authorgroup>
    <authorgroup>
      <author>
	<firstname>Jake</firstname>
	<surname>Hamby</surname>
	<contrib>  原作為：</contrib>
	<!-- 6 Oct 1995 -->
      </author>
    </authorgroup>
  </chapterinfo>

  <title>設定 FreeBSD Kernel</title>

  <sect1 id="kernelconfig-synopsis">
    <title>概述</title>

    <indexterm>
      <primary>kernel</primary>
      <secondary>building a custom kernel</secondary>
    </indexterm>

    <para>kernel 是整個 &os; 作業系統的核心。
      它控制了系統的整體運作，包含和記憶體管理、安全控管、網路、硬碟存取等等。
      儘管目前 &os; 大多可以用動態 module 來載入、卸載所需功能，
      但有時候仍有必要學會重新調配 kernel。</para>

    <para>讀完這章，您將了解︰</para>

    <itemizedlist>
      <listitem>
	<para>為何需要重新調配、編譯 kernel？</para>
      </listitem>

      <listitem>
	<para>要怎麼修改 kernel 設定檔？</para>
      </listitem>

      <listitem>
	<para>如何以 kernel 設定檔來建立、編譯新的 kernel 呢？</para>
      </listitem>

      <listitem>
	<para>如何安裝新的 kernel。</para>
      </listitem>

      <listitem>
	<para>如何處理 kernel 錯誤無法開機的情形。</para>
      </listitem>
    </itemizedlist>

    <para>本章所舉例的相關指令都是以 <username>root</username> 權限來進行。</para>
  </sect1>

  <sect1 id="kernelconfig-custom-kernel">
    <title>為何需要重新調配、編譯 kernel？</title>

    <para>早期的 &os; 的 kernel 被戲稱為 <quote>monolithic</quote> kernel。
    這意思是說當時的 kernel 是個大塊頭程式，且只支援固定的硬體而已。
    如果您想改變 kernel 的設定，那麼必須編譯一個新的並重新開機，才能啟用。</para>

    <para>現在的 &os; 已快速成長到新型態的管理模式，其重要特色是：
      kernel 功能可以隨時依據需求，
      而以動態載入或卸載相關的 kernel module。
      這使得 kernel 能夠快速因應新的環境而作調整
      (有點像是：筆記型電腦上的 PCMCIA 卡一樣即插即用)
      ，或是增加其他原本的預設 kernel(<filename>GENERIC</filename>)
      所沒有的功能。  這種模式，就叫做 modular kernel(核心模組)。</para>

    <para>儘管如此，還是有一些功能仍須編譯在 kernel 內才行。
      因為有時候是因為這些功能與 kernel 結合的相當複雜緊密，
      而無法將它們弄成可動態載入的 module；
      有時候，則是因為沒有人有空來弄那些 kernel module 的實作。</para>

    <para>重新調配、編譯 kernel 幾乎是每位 BSD 使用者所必須經歷的過程。
      儘管這項工作可能比較耗時，但在 &os; 的使用上會有許多好處。
      跟必須支援大多數各式硬體的 <filename>GENERIC</filename> kernel 相比的話，
      自行調配 kernel 不同處在於：可以更『體貼』，只支援『自己硬體』的部分就好。
      好處在於，譬如︰</para>

    <itemizedlist>
      <listitem>
	<para>開機速度更快：因為自行調配的 kernel 只需要偵測您系統上的硬體，
	  所以讓啟動所花的過程更流暢快速。</para>
      </listitem>

      <listitem>
	<para>佔用的記憶體更少：自行調配的 kernel 通常會比 
	  <filename>GENERIC</filename> 核心使用更少的記憶體，由於 kernel 
	  必須一直存放在記憶體內，因此這就顯得更加重要。因此，
	  對於記憶體較小的系統來說，
	  自行調配的 kernel 就可發揮更多的作用、揮灑空間。</para>
      </listitem>

      <listitem>
	<para>可支援更多硬體：您可在自行調配的 kernel 增加一些原本 
	  <filename>GENERIC</filename> 核心沒有提供的硬體支援，像是音效卡之類的。</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 id="kernelconfig-devices">
    <sect1info>
      <authorgroup>
	<author>
	  <firstname>Tom</firstname>
	  <surname>Rhodes</surname>
	  <contrib>Written by </contrib>
	</author>
      </authorgroup>
    </sect1info>
    <title>探測系統硬體</title>
    
    <para>在進行 kernel 設定的探索之旅前，
      先把該機器各項硬體資訊作點調查會是明智之舉。
      若 &os; 並非主要的作業系統，那麼也可以輕鬆透過目前所使用的作業系統，
      來查看相關硬體資訊表。  舉例來說，&microsoft; 的
      <application>裝置管理員(Device Manager)</application>
      內通常會有目前有裝的硬體資訊。  而 <application>裝置管理員</application>
      是在控制台。</para>

    <note>
      <para>&microsoft.windows; 某些版本則是先透過
	<application>系統(System)</application> 再進入
	<application>裝置管理員</application>。</para>
    </note>

    <para>若該機器尚未安裝任何作業系統，那麼就要親自找出相關硬體資訊。
      其中一種方式是透過 &man.dmesg.8; 以及 &man.man.1;。  &os;
      上大多硬體都會有相關的 man 說明有支援的規格型號，
      並且開機的偵測過程中，也會列出有找到的硬體。  舉個例子，
      下面這幾行是說有偵測到滑鼠，並且是以 <devicename>psm</devicename>
      驅動程式：</para>

    <programlisting>psm0: &lt;PS/2 Mouse&gt; irq 12 on atkbdc0
psm0: [GIANT-LOCKED]
psm0: [ITHREAD]
psm0: model Generic PS/2 mouse, device ID 0</programlisting>

    <para>驅動程式必須要在自訂的 kernel 設定檔內加入，或者是用
      &man.loader.conf.5;。</para>

    <para><command>dmesg</command> 有時只顯示系統訊息而沒有開機偵測的部份，
      遇到這種情況請查閱 <filename>/var/run/dmesg.boot</filename> 檔。</para>

    <para>另外也可以透過 &man.pciconf.8; 來列出更詳細的相關資訊。
      舉例說明：</para>

    <programlisting>ath0@pci0:3:0:0:        class=0x020000 card=0x058a1014 chip=0x1014168c rev=0x01 hdr=0x00
    vendor     = 'Atheros Communications Inc.'
    device     = 'AR5212 Atheros AR5212 802.11abg wireless'
    class      = network
    subclass   = ethernet</programlisting>

    <para>上面顯示是透過 <command>pciconf <option>-lv</option></command>
      所看到的 <devicename>ath</devicename> 無線網卡驅動程式。  可以用
      <command>man <replaceable>ath</replaceable></command> 來查看
      &man.ath.4; 的相關說明。</para>

    <para>在使用 &man.man.1; 時，加上 <option>-k</option>
      參數也可以提供比較精準的資訊。  以上述例子而言，可以改為打：</para>

    <screen>&prompt.root; man -k <replaceable>Atheros</replaceable></screen>

    <para>就會列出有含上述關鍵字的相關 man 說明：</para>

    <programlisting>ath(4)                   - Atheros IEEE 802.11 wireless network driver
ath_hal(4)               - Atheros Hardware Access Layer (HAL)</programlisting>

    <para>知己知彼，先瞭解相關硬體環境，才能讓接下來的自訂 kernel
      打造過程更為順利。</para>
  </sect1>

  <sect1 id="kernelconfig-building">
    <title>重新調配、編譯 kernel</title>
    <indexterm>
      <primary>kernel</primary>
      <secondary>building / installing</secondary>
    </indexterm>

    <para>首先對 kernel 相關目錄作快速介紹。
      這裡所提到的所有目錄都在 <filename>/usr/src/sys</filename> 內，
      也可以用 <filename>/sys</filename> 這個 symbolic link 來連到這。
      這裡的許多子目錄分別擺放 kernel 的各組成部分，但對打造 kernel 
      影響最重要的目錄是 
      <filename><replaceable>arch</replaceable>/conf</filename>，
      這裡是可以針對需求來修改自訂 kernel 相關設定。
      此外，還有在編譯 kernel 過程中會暫時擺放的 <filename>compile</filename> 
      目錄。
      剛講到的 <replaceable>arch</replaceable> 可以是右列架構之一：
      <filename>i386</filename>、<filename>alpha</filename>、
      <filename>amd64</filename>、<filename>ia64</filename>、
      <filename>powerpc</filename>、<filename>sparc64</filename>、
      <filename>pc98</filename>(在日本較流行的另一種 PC 硬體架構)。
      在各特定硬體架構目錄的東西，只搭配相對應的硬體架構而已。
      而其餘的原始碼則是與硬體架構無關，可以在所有 &os; 可裝的平台上共用。
      整體目錄架構都是有邏輯可循，像是各項有支援的硬體設備、檔案系統，
      以及相關選項通常都會擺在它們自己的子目錄內。</para>

    <para>本章所用到的例子，都是你使用 i386 架構的機器。
      請依實際情況，對相關目錄作調整即可。</para>

    <note>
      <para>若您系統上 <emphasis>沒裝</emphasis> 
	<filename>/usr/src/sys</filename> 目錄，
	也就是說沒裝 kernel source code 的話，那麼最簡單安裝方式就是以
	<username>root</username> 權限來執行 <command>sysinstall</command>，
	接著請選 <guimenuitem>Configure</guimenuitem>，然後選
	<guimenuitem>Distributions</guimenuitem> 接著為
	<guimenuitem>src</guimenuitem> 再選
	<guimenuitem>base</guimenuitem> 最後選
	<guimenuitem>sys</guimenuitem>。  若不喜歡用 
	<application>sysinstall</application> 而且手邊有
	<quote>正式的</quote> &os; 光碟可以用的話，
        那麼也可以用以下指令來安裝：</para>

      <screen>&prompt.root; <userinput>mount /cdrom</userinput>
&prompt.root; <userinput>mkdir -p /usr/src/sys</userinput>
&prompt.root; <userinput>ln -s /usr/src/sys /sys</userinput>
&prompt.root; <userinput>cat /cdrom/src/ssys.[a-d]* | tar -xzvf -</userinput>
&prompt.root; <userinput>cat /cdrom/src/sbase.[a-d]* | tar -xzvf -</userinput></screen>
    </note>

    <para>接下來，切換到
      <filename><replaceable>arch</replaceable>/conf</filename> 目錄，
      複製 <filename>GENERIC</filename> 設定檔為你想稱呼的新 kernel 名稱。
      例如：</para>

    <screen>&prompt.root; <userinput>cd /usr/src/sys/<replaceable>i386</replaceable>/conf</userinput>
&prompt.root; <userinput>cp GENERIC MYKERNEL</userinput></screen>

    <para>通常，命名方式都是大寫。如果你負責維護許多不同硬體架構的 &os; 
      機器的話，那麼照該機器名稱(hostname)來命名會是比較明智。
      上面例子中之所以命名為 <filename>MYKERNEL</filename> 
      就是因為這緣故。</para>

    <tip>
      <para>建議不要把改過的 kernel 設定檔直接放在 
	<filename>/usr/src</filename>。  因為若編譯遇到其他問題時，
	直接砍掉 <filename>/usr/src</filename> 再重練，
	可能會是比較乾脆的選擇之一。
	一旦真的砍了之後，你可能幾秒之後才會醒悟到：
	你同時也砍掉自己改的 kernel 設定檔。
	此外，也不要直接修改 <filename>GENERIC</filename>，因為下次你
	<link linkend="cutting-edge">更新 source tree</link>時，
	它會被新版覆蓋，而相關修改也將隨之而逝。</para>

      <para>你也可考慮把 kernel 設定檔改放到其他地方，然後再到
	<filename><replaceable>i386</replaceable></filename> 
	目錄內建個指向它的 symbolic link。</para>

      <para>舉例：</para>

      <screen>&prompt.root; <userinput>cd /usr/src/sys/<replaceable>i386</replaceable>/conf</userinput>
&prompt.root; <userinput>mkdir /root/kernels</userinput>
&prompt.root; <userinput>cp GENERIC /root/kernels/<replaceable>MYKERNEL</replaceable></userinput>	
&prompt.root; <userinput>ln -s /root/kernels/<replaceable>MYKERNEL</replaceable></userinput></screen>
    </tip>

    <para>現在，就開始用自己喜歡的編輯器來修改 <filename>MYKERNEL</filename>。
      若才剛裝好 FreeBSD 而已，唯一可用的編輯器很可能是 
      <application>vi</application> 了，由於它的用法很多種，礙於篇幅將不詳細介紹，
      你可在 <link linkend="bibliography">參考書目</link> 內找到相關書籍。
      不過，&os; 也提供另一個更好用的編輯器，它叫做 
      <application>ee</application>，對新手而言，這可能是蠻好的選擇。
      你可以任意修改檔案內的相關註解以說明相關設定為何，
      或者其他想改的 <filename>GENERIC</filename> 設定內容。</para>
    <indexterm><primary>SunOS</primary></indexterm>

    <para>若你有在 &sunos; 或者其他種 BSD 作業系統下進行編譯 kernel 的經驗，
      那麼應該已經很熟悉本篇所介紹的大部分步驟。
      換句話說，若您之前用的是 DOS 這類作業系統，那麼
      <filename>GENERIC</filename> 設定檔的內容就可能比較難懂些，沒關係，
      我們將在下面的 <link linkend="kernelconfig-config">kernel 設定</link>
      會循序漸進地介紹。</para>

    <note>
      <para>若有從 &os; 計劃去 <link 
	linkend="cutting-edge">更新你的 source tree</link> 的話，
        則切記在進行任何升級之前，務必要察看 
	<filename>/usr/src/UPDATING</filename>。
	這檔會介紹在更新過程中的重大議題或要注意的事項。
	由於 <filename>/usr/src/UPDATING</filename> 是對應於你機器上目前的
	&os; source code 版本，因此會提供比本手冊更新的內容。</para>
    </note>

    <para>現在開始來編譯 kernel 吧。</para>

    <procedure>
      <title>編譯 Kernel</title>

      <step>
	<para>請切換至 <filename
	  role="directory">/usr/src</filename> 目錄：</para>

	<screen>&prompt.root; <userinput>cd /usr/src</userinput></screen>
      </step>

      <step>
	<para>編譯 kernel：</para>

	<screen>&prompt.root; <userinput>make buildkernel KERNCONF=<replaceable>MYKERNEL</replaceable></userinput></screen>
      </step>

      <step>
	<para>安裝新 kernel：</para>

	<screen>&prompt.root; <userinput>make installkernel KERNCONF=<replaceable>MYKERNEL</replaceable></userinput></screen>
      </step>
    </procedure>

    <note>
      <para>要有完整的 &os; source tree 才能編譯 kernel。</para>
    </note>

    <tip>
      <para>預設情況下，在編譯自訂 kernel 時，<emphasis>全部的</emphasis> 
	kernel modules 也會一起重編。  若要快速升級 kernel，
	或是只想重編所需的 kernel module，那麼在編譯 kernel 前要先改一下
	<filename>/etc/make.conf</filename>，比如：</para>

      <programlisting>MODULES_OVERRIDE = linux acpi sound/sound sound/driver/ds1 ntfs</programlisting>

      <para>上面該設定值為所希望重編的 kernel module 列表。</para>

      <programlisting>WITHOUT_MODULES = linux acpi sound/sound sound/driver/ds1 ntfs</programlisting>

      <para>而上面這設定值則為不要編入的 kernel module 列表。  若想更瞭解其他
	kernel 編譯的相關變數，請參閱 &man.make.conf.5; 說明。</para>
    </tip>

    <indexterm>
      <primary><filename class="directory">/boot/kernel.old</filename></primary>
    </indexterm> 

    <para>新的 kernel 會複製到 <filename 
      class="directory">/boot/kernel</filename> 目錄內的
      <filename>/boot/kernel/kernel</filename>，而舊的則移至
      <filename>/boot/kernel.old/kernel</filename>。  
      現在呢，先關機，然後就會以新 kernel 重開機
      若有問題的話，本章後面會介紹一些<link 
      linkend="kernelconfig-trouble">疑難雜症</link>來協助你。
      若新 kernel 無法開機的話，請參閱 <link 
      linkend="kernelconfig-noboot">這裡</link> 以恢復系統運作。</para>

    <note>
      <para>至於開機過程的其他相關檔案、設定，比如 &man.loader.8; 
	及其設定，則放在 <filename>/boot</filename>。
	Third party 或自訂的 kernel modules 則會放在
	<filename class="directory">/boot/kernel</filename>，不過，
	應注意要保持 kernel module 與 kernel 是否有同步，
	這點很重要，否則會導致不穩或出問題。</para>
    </note>
  </sect1>

  <sect1 id="kernelconfig-config">
    <sect1info>
      <authorgroup>
	<author>
	  <firstname>Joel</firstname>
	  <surname>Dahl</surname>
	  <contrib>Updated for &os; 6.X by </contrib>
	</author>
      </authorgroup>
    </sect1info>
    <title>kernel 設定檔解說</title>
    <indexterm>
      <primary>kernel</primary>
      <secondary>NOTES</secondary>
    </indexterm>
    <indexterm><primary>NOTES</primary></indexterm>
    <indexterm>
      <primary>kernel</primary>
      <secondary>configuration file</secondary>
    </indexterm>

    <para>kernel 設定檔的內容格式相當簡單。
      每一行都包括一個關鍵字，以及一個或多個參數。事實上，
      很多行大多只有一個參數。任何以 <literal>#</literal> 
      開頭的敘述都將被視為註解而被忽略。
      接下來將以在 <filename>GENERIC</filename> 所出現的順序一一介紹之。
      <anchor
      id="kernelconfig-options">若要看與該平台架構有關的各選項、設備列表，
      請參閱與 <filename>GENERIC</filename> 檔同目錄的 <filename>NOTES</filename>
      檔。  而與平台架構差異較無關的通用部份，則可參閱
      <filename>/usr/src/sys/conf/NOTES</filename>。</para>

    <note>
      <para>若為了測試，而需要一份含有所有可用設定的設定檔，那麼請以
	<username>root</username> 身份下：</para>

      <screen>&prompt.root; <userinput>cd /usr/src/sys/<replaceable>i386</replaceable>/conf && make LINT</userinput></screen>
    </note>

    <indexterm>
      <primary>kernel</primary>
      <secondary>configuration file</secondary>
    </indexterm>

    <para>下面為 <filename>GENERIC</filename> 設定檔的範例，
      其中包括說明用的註釋。  這例子應該與您機器上的
      <filename>/usr/src/sys/<replaceable>i386</replaceable>/conf/GENERIC</filename>
      相當接近。</para>

    <indexterm>
      <primary>kernel options</primary>
      <secondary>machine</secondary>
    </indexterm>

    <programlisting>machine		i386</programlisting>

    <para>此處是指機器架構，必須為
      <literal>alpha</literal>、<literal>amd64</literal>、
      <literal>i386</literal>、<literal>ia64</literal>、
      <literal>pc98</literal>、<literal>powerpc</literal>、
      <literal>sparc64</literal> 其中之一。</para>

    <indexterm>
      <primary>kernel options</primary>
      <secondary>cpu</secondary>
    </indexterm>
    <programlisting>cpu          I486_CPU
cpu          I586_CPU
cpu          I686_CPU</programlisting>

    <para>上面設定是指定要用哪一種 CPU 型號。  也可以同時加上多組 CPU 型號
      (比如說萬一不確定是否要用 <literal>I586_CPU</literal> 或
      <literal>I686_CPU</literal>)。  然而自訂 kernel 的話，建議先確認自己的
      CPU 型號，然後只用最適合的那組就好了。  若不確定 CPU 到底是用哪一種，
      可以查閱 <filename>/var/run/dmesg.boot</filename>
      的開機訊息以確定。</para>

    <indexterm>
      <primary>kernel options</primary>

      <secondary>ident</secondary>
    </indexterm>

    <programlisting>ident          GENERIC</programlisting>

    <para>這是設定該 kernel 名稱為何，可以隨意命名之，像是取名為
      <literal>MYKERNEL</literal>，若是有照先前說明來作大概會取這樣名字。
      <literal>ident</literal> 後面的字串會在開機時顯示，因此若要辨認新 kernel
      與常用 kernel 的話，就設定不同組名稱即可(比如在自訂實驗用的
      kernel)。</para>

    <programlisting>#To statically compile in device wiring instead of /boot/device.hints
#hints          "GENERIC.hints"         # Default places to look for devices.</programlisting>

    <para>&man.device.hints.5; 可用來設定各項驅動程式的選項。
      開機時 &man.loader.8; 會檢查預設的 <filename>/boot/device.hints</filename>
      設定檔。  使用 <literal>hints</literal> 選項，就可以把這些 hints
      靜態編入 kernel 內。  如此一來就不必在 <filename>/boot</filename>
      內建立 <filename>device.hints</filename> 檔。</para>

    <!-- XXX: Add a comment here that explains when compiling hints into
      the kernel is a good idea and why. -->

    <programlisting>makeoptions     DEBUG=-g          # Build kernel with gdb(1) debug symbols</programlisting>

    <para>加上 <option>-g</option> 選項的話，&os; 會在編譯過程加上 debug
      用的資訊，透過這選項會讓 &man.gcc.1; 啟用 debug
      所會用到的相關資訊。</para>

    <programlisting>options          SCHED_4BSD         # 4BSD scheduler</programlisting>

    <para>&os; 傳統所用(並且是預設)的系統 CPU scheduler。  若您不清楚要如何設定
      ，請保留這設定。</para>

    <programlisting>options          PREEMPTION         # Enable kernel thread preemption</programlisting>

    <para>允許 kernel 裡的 thread 被具有更高優先權的 thread 先佔。
	  <footnote>
	  <para>譯註：例如 thread A 正在 kernel 裡執行，此時若 thread B 也想執行，
	  且 thread B 具有比 thread A 更高的優先權，則開啟此選項可允許 kernel 
	  中斷 thread A，先執行 thread B。</para>
	  </footnote>
	  此選項對互動的操作<footnote><para>譯註：例如圖型介面操作。</para>
	  </footnote>有幫助，且可讓等待中的 thread 較快被執行。</para>

    <programlisting>options          INET              # InterNETworking</programlisting>

    <para>網路支援。請保留它，即使您沒有打算連接網路。許多程式需要 loopback networking
      （如連線到你自己的電腦），所以基本上這個選項是必要的。</para>

    <programlisting>options          INET6             # IPv6 communications protocols</programlisting>

    <para>IPv6 通訊協定的支援。</para>

    <programlisting>options          FFS               # Berkeley Fast Filesystem</programlisting>

    <para>基本的硬碟檔案系統，如果您要從硬碟開機，請保留它。</para>

    <programlisting>options          SOFTUPDATES       # Enable FFS Soft Updates support</programlisting>

    <para>此選項開啟 kernel 支援的 Soft Updates，Soft Updates 能加速磁碟的寫入
	  效能。開啟此選項後，別忘了每個磁碟都要各別指定才會生效。請檢查
	  &man.mount.8; 指令的輸出來查看磁碟的 Soft Updates 是否開啟。如果您沒看到
	  任何 <literal>soft-updates</literal> 字樣，您可使用 &man.tunefs.8; 指令
	  來開啟已存在檔案系統的 Soft Updates，或使用 &man.newfs.8; 指令來開啟新
	  檔案系統的 Soft Updates。<footnote><para>譯註：由於 Soft Updates 設計用
	  於檔案系統層，所以這裡提到的磁碟都是指檔案系統。</para></footnote></para>

    <programlisting>options          UFS_ACL           # Support for access control lists</programlisting>

	<para>此選項開啟 kernel 支援的「存取控制清單(access control lists, ACL)」
	  功能。此功能需要用到額外的屬性及 UFS2<footnote><para>譯註：extended 
	  attributes， 指的是檔案系統中除了權限、擁有者等之外額外的屬性。就譯者的認
	  知 UFS2 才支援此功能，但 &man.acl.3; 的 HISTORY 一節說明 UFS1 也支援。
	  </para></footnote>。更詳細的說明請參照<xref linkend="fs-acl">。預設 ACL 
	  是開啟的，而且如果某個檔案系統過去曾使用過，請千萬別關掉它，否則 ACL 資訊
	  會被移除，而該檔案的權限可能會變成非預期的。</para>

    <programlisting>options          UFS_DIRHASH       # Improve performance on big directories</programlisting>

	<para>開啟此選項可加速大型目錄<footnote><para>譯註：大型目錄指的是一個目錄
	  下有極大數量的檔案。</para></footnote>的存取，不過代價是消耗更多的記憶體。
	  通常在大型 server 或互動的 workstation 上會開啟此選項，而在記憶體少、磁
	  碟速度較不重要的小型系統上(例如防火牆) 會關閉此選項。</para>

    <programlisting>options          MD_ROOT           # MD is a potential root device</programlisting>

	<para>開啟此選項支援用記憶體磁碟<footnote><para>譯註：記憶體磁碟(memory 
	  backed virtual disk) 指的是用 memory 來當磁碟裝置，並在其上建立檔案系統
	  </para></footnote>來當根設備(root device)。</para>

    <indexterm>
      <primary>kernel options</primary>
      <secondary>NFS</secondary>
    </indexterm>
    <indexterm>
      <primary>kernel options</primary>
      <secondary>NFS_ROOT</secondary>
    </indexterm>
    <programlisting>options          NFSCLIENT         # Network Filesystem Client
options          NFSSERVER         # Network Filesystem Server
options          NFS_ROOT          # NFS usable as /, requires NFSCLIENT</programlisting>

    <para>用於網路檔案系統(Network file system)。如果您沒有透過網路從 &unix; 
	  檔案伺服器掛載(mount) 檔案系統的需求，您可以註解掉它們。</para>

    <indexterm>
      <primary>kernel options</primary>
      <secondary>MSDOSFS</secondary>
    </indexterm>
    <programlisting>options          MSDOSFS           # MSDOS Filesystem</programlisting>

    <para>MS-DOS 檔案系統。  除非您要在開機時掛載 DOS 格式的硬碟，
      不然您可以放心的把這行註解掉。  如同前述，在您第一次掛載 DOS 分割區時，
      kernel 將會自動載入模組來支援它。  此外，
      <filename role="package">emulators/mtools</filename>
      這個軟體，可以讓你存取 DOS 磁片，而不需要掛載或卸載軟碟
      (也不需要 <literal>MSDOSFS</literal> 的支援)。</para>

    <programlisting>options          CD9660            # ISO 9660 Filesystem</programlisting>

    <para>光碟機所使用的 ISO 9660 檔案系統。  如果沒有光碟機，
      或是很少用光碟機讀取資料，可以把這一行註解起來(因為 kernel 
      在第一次掛載時，會自動載入)。  音樂 CD
      則不會用到這個檔案系統。</para>

    <programlisting>options          PROCFS            # Process filesystem(requires PSEUDOFS)</programlisting>

    <para>process 檔案系統。  這是一個掛在 <filename>/proc</filename> 底下的
      <quote>假</quote>檔案系統，其作用是允許一些程式，像是 &man.ps.1;
      來讀取正在執行的 processes 資訊。  大多數情況下是不需要使用到
      <literal>PROCFS</literal>，
      因為大多數的偵錯或監控工具，都已不需要透過 <literal>PROCFS</literal>
      就能運作。  預設安裝也並不會掛載。</para>

    <programlisting>options          PSEUDOFS          # Pseudo-filesystem framework</programlisting>

    <para>在 6.X kernel 若要用 <literal>PROCFS</literal>，則必須加上
      <literal>PSEUDOFS</literal> 才行。</para>

    <programlisting>options          GEOM_GPT          # GUID Partition Tables.</programlisting>

    <para>該選項可以讓單一磁碟上使用大量磁碟分割區的支援。</para>

    <programlisting>options          COMPAT_43         # Compatible with BSD 4.3 [KEEP THIS!]</programlisting>

    <para>4.3BSD 相容支援。  請保留它，否則某些程式將會無法執行。</para>

    <programlisting>options          COMPAT_FREEBSD4   # Compatible with &os;4</programlisting>

    <para>為了支援在舊版 &os;&nbsp;4.X 下所編譯的程式，該選項在 &os;&nbsp;5.X
      的 &i386; 及 Alpha 版本下需要打開。  建議在所有 &i386; 及 Alpha
      機器上打開此相容設定，因為可能會需要跑舊的程式。
      此外，在 5.X 才開始支援的平台，比如 ia64 以及 &sparc64; 平台，
      就不需要加上此設定了。</para>

    <programlisting>options          COMPAT_FREEBSD5   # 與 &os;5 相容</programlisting>

    <para>該行是 &os;&nbsp;6.X 及更新的版本，若需支援 &os;&nbsp;5.X
      系統呼叫才需要設定。</para>
    
    <programlisting>options          SCSI_DELAY=5000  # Delay (in ms) before probing SCSI</programlisting>

    <para>該選項會讓 kernel 在偵測 SCSI 設備之前先等待 5 秒。  若只有 IDE 硬碟，
      則可以忽略此設定，反之也可以試著把這數值調低，以加速開機過程。
      當然，如此一來可能會造成 &os; 在識別 SCSI 設備時發生問題，
      若有問題，請記得調高此數值看看。</para>

    <programlisting>options          KTRACE            # ktrace(1) support</programlisting>

    <para>開啟 kernel 追蹤功能，在偵錯時很有用。</para>

    <programlisting>options          SYSVSHM           # SYSV-style shared memory</programlisting>

    <para>提供 System&nbsp;V shared memory (SHM) 支援，最常用到 SHM 的應該是
      X 的 XSHM 延伸，不少繪圖相關程式會自動使用 SHM 以提供額外的速度。
      如果您使用 X，您絕對需要它。</para>

    <programlisting>options          SYSVMSG           # SYSV-style message queues</programlisting>

    <para>System&nbsp;V messages 支援。  它只會在 kernel 中佔用幾百 bytes
      而已。</para>

    <programlisting>options          SYSVSEM           # SYSV-style semaphores</programlisting>

    <para>System&nbsp;V semaphores 支援，較少會用到，
      但只會佔用核心幾百 bytes。</para>

    <note>
      <para>&man.ipcs.1; 的 <option>-p</option> 參數可以顯示所有用到
	System&nbsp;V 機制的 process。</para>
    </note>

    <programlisting>options 	     _KPOSIX_PRIORITY_SCHEDULING # POSIX P1003_1B real-time extensions</programlisting>

    <para>1993 年時對 &posix; 所做的 Real-time 延伸。  Ports Collection
      的某些程式會用到(比方 <application>&staroffice;</application>)。</para>

    <programlisting>options          KBD_INSTALL_CDEV  # install a CDEV entry in /dev</programlisting>

    <para>該選項則是在 <filename>/dev</filename> 下建立鍵盤的設備節點所必須的
      。</para>

    <programlisting>options          ADAPTIVE_GIANT    # Giant mutex is adaptive.</programlisting>

	<para>Giant 專指一種特別的互斥鎖機制 (mutual exclusion machanism)，這個
	  機制能保護很大一部份的 kernel 資源。然而這種作法往往成為 SMP 系統中的
	  效能瓶頸，因此目前 FreeBSD 正積極地用僅保護個別資源的鎖來取代 Giant。
	  <footnote><para>譯註：Giant 是最早 FreeBSD 用以支援 SMP 的方法，之後的 
	  SMPng 計畫即是改寫這些 Giant lock，用更細緻的局部 lock 來取代 Giant lock
	  以增進效能。</para></footnote>
	  <literal>ADAPTIVE_GIANT</literal> 選項能使 Giant 要被互斥鎖上時，等待的
	  thread 將動態適應地(adaptively) 自旋。
	  <footnote><para>譯註：原文是 <literal>ADAPTIVE_GIANT</literal> option 
	  causes Giant to be included in the set of mutexes adaptively spun on.
	  自旋(spin) 指的是 thread 在等待進入關鍵區域(critical section) 之前，往往
	  會進入空迴圈以等待其它 thread 退出關鍵區域。</para></footnote>
	  也就是說，當一個 thread 希望鎖上 Giant，但 Giant 已經被其它 thread 鎖上
	  時，這個 thread 將會保持執行並等待該 Giant 被釋放。如果沒有開啟這個選項，
	  通常的情形是這個 thread 會進入 sleep 狀態，直到下次輪到它執行，它再嘗試
	  要鎖上 Giant。如果您不確定這個選項的用途，就保持預設吧。</para>
	
	<note>
	  <para>註：從 &os; 8.0-CURRENT 開始，所有的互斥所預設都是動態適應
	  (adaptive) 的，除非在編譯時加上 <literal>NO_ADAPTIVE_MUTEXES</literal> 
	  來強制不要動態適應。因此 8.0-CURRENT 之後的核心設定檔移除了 
	  <literal>ADAPTIVE_GIANT</literal> 選項。</para>
	</note>

    <indexterm>
      <primary>kernel options</primary>
      <secondary>SMP</secondary>
    </indexterm>
    <programlisting>device          apic               # I/O APIC</programlisting>

	<para>apic 裝置開啟用 I/O APIC 來傳遞中斷(interrupt)。apic 裝置可用於 
	  UP(單處理器) 或 SMP(多處理器) kernel，但 SMP kernel 一定得開啟 apic。
	  若要 SMP 支援，請加入 <literal>options SMP</literal>。

    <note>
      <para>apic 只限 i386 架構才有，其他架構則不必加上這行。</para>
    </note>

    <programlisting>device          eisa</programlisting>

    <para>如果您的主機板支援 EISA，請加上它。開啟此選項可自動偵測並設定 EISA
	  bus 上的所有裝置。</para>

    <programlisting>device          pci</programlisting>

    <para>如果您的主機板有 PCI 匯流排，請記得要加。  這個選項開啟可自動偵測 PCI
      卡，並橋接 PCI 到 ISA 的匯流排。</para>

    <programlisting># Floppy drives
device          fdc</programlisting>

    <para>軟碟機。</para>

    <programlisting># ATA and ATAPI devices
device          ata</programlisting>

	<para>這個驅動程式支援所有的 ATA 和 ATAPI 裝置。您只需要加入一行
      <literal>device ata</literal> 即可自動偵測出所有的 PCI ATA/ATAPI 裝置。
	</para>

    <programlisting>device          atadisk                 # ATA disk drives</programlisting>

    <para>和 <literal>device ata</literal> 一起使用以支援 ATA 硬碟。</para>

    <programlisting>device          ataraid                 # ATA RAID drives</programlisting>

    <para>和 <literal>device ata</literal> 一起使用以支援 ATA RAID 硬碟。</para>

    <programlisting><anchor id="kernelconfig-atapi">
device          atapicd                 # ATAPI CDROM drives</programlisting>

    <para>和 <literal>device ata</literal> 一起使用以支援 ATAPI 光硬碟。</para>

    <programlisting>device          atapifd                 # ATAPI floppy drives</programlisting>

    <para>和 <literal>device ata</literal> 一起使用以支援 ATAPI 軟硬碟。</para>

    <programlisting>device          atapist                 # ATAPI tape drives</programlisting>

    <para>和 <literal>device ata</literal> 一起使用以支援 ATAPI 磁帶碟。</para>

    <programlisting>options         ATA_STATIC_ID           # Static device numbering</programlisting>

	<para>此選項能固定 ATA 控制器的編號。若沒有此選項，裝置的標號將會動態分配。
	</para>

    <programlisting># SCSI Controllers
device          ahb        # EISA AHA1742 family
device          ahc        # AHA2940 and onboard AIC7xxx devices
options         AHC_REG_PRETTY_PRINT    # Print register bitfields in debug
                                        # output.  Adds ~128k to driver.
device          ahd        # AHA39320/29320 and onboard AIC79xx devices
options         AHD_REG_PRETTY_PRINT    # Print register bitfields in debug
				        # output.  Adds ~215k to driver.
device          amd        # AMD 53C974 (Teckram DC-390(T))
device          isp        # Qlogic family
device          ispfw      # Firmware for QLogic HBAs- normally a module
device          mpt        # LSI-Logic MPT-Fusion
#device         ncr        # NCR/Symbios Logic
device          sym        # NCR/Symbios Logic (newer chipsets + those of `ncr')
device          trm        # Tekram DC395U/UW/F DC315U adapters

device          adv        # Advansys SCSI adapters
device          adw        # Advansys wide SCSI adapters
device          aha        # Adaptec 154x SCSI adapters
device          aic        # Adaptec 15[012]x SCSI adapters, AIC-6[23]60.
device          bt         # Buslogic/Mylex MultiMaster SCSI adapters

device          ncv        # NCR 53C500
device          nsp        # Workbit Ninja SCSI-3
device          stg        # TMC 18C30/18C50</programlisting>

	<para>SCSI 控制器。您可將您系統沒有的裝置註解掉。如果您的系統只有 IDE 裝置，
	  您可以註解掉全部。<literal>*_REG_PRETTY_PRINT</literal> 是用來幫助除
	  錯的選項。</para>

    <programlisting># SCSI peripherals
device          scbus      # SCSI bus (required for SCSI)
device          ch         # SCSI media changers
device          da         # Direct Access (disks)
device          sa         # Sequential Access (tape etc)
device          cd         # CD
device          pass       # Passthrough device (direct SCSI access)
device          ses        # SCSI Environmental Services (and SAF-TE)</programlisting>

	<para>SCSI 週邊裝置。用樣的，註解掉您沒有的裝置。如果您的系統只有 IDE，
	  全部註解掉吧。</para>

    <note>
	  <para>USB &man.umass.4; 驅動程式及其它某些驅動程式會用到 SCSI 子系統，
	    僅管它們並不是直的 SCSI 裝置。因此如果您用到這類的裝置，請不要移除
		SCSI 支援。
		<footnote><para>譯註：以譯者的經驗在沒有 SCSI 設備的系統上，通常留下 
		<literal>scbus</literal>、<literal>da</literal> 和 
		<literal>pass</literal> 即可。</para></footnote>
	  </para>
    </note>

    <programlisting># RAID controllers interfaced to the SCSI subsystem
device          amr        # AMI MegaRAID
device          arcmsr     # Areca SATA II RAID
device          asr        # DPT SmartRAID V, VI and Adaptec SCSI RAID
device          ciss       # Compaq Smart RAID 5*
device          dpt        # DPT Smartcache III, IV - See NOTES for options
device          hptmv      # Highpoint RocketRAID 182x
device          rr232x     # Highpoint RocketRAID 232x
device          iir        # Intel Integrated RAID
device          ips        # IBM (Adaptec) ServeRAID
device          mly        # Mylex AcceleRAID/eXtremeRAID
device          twa        # 3ware 9000 series PATA/SATA RAID

# RAID controllers
device          aac        # Adaptec FSA RAID
device          aacp       # SCSI passthrough for aac (requires CAM)
device          ida        # Compaq Smart RAID
device          mfi        # LSI MegaRAID SAS
device          mlx        # Mylex DAC960 family
device          pst        # Promise Supertrak SX6000
device          twe        # 3ware ATA RAID</programlisting>

    <para>RAID 控制器的支援。如果您沒有任何 RAID 裝置，
      您可以註解或移除之。</para>

    <programlisting># atkbdc0 controls both the keyboard and the PS/2 mouse
device          atkbdc     # AT keyboard controller</programlisting>

    <para>鍵盤控制器 (<literal>atkbdc</literal>) 為 AT 鍵盤及 PS/2 滑鼠
      提供 I/O 服務。鍵盤驅動程式 (<literal>atkbd</literal>) 及 PS/2 滑鼠
      驅動程式 (<literal>psm</literal>) 也需要此控制器。</para>

    <programlisting>device          atkbd      # AT keyboard</programlisting>

    <para><literal>atkbd</literal> 驅動程式跟 <literal>atkbdc</literal> 控制器
      一起提供 AT 84 鍵盤或增強型 AT 鍵盤的支援。</para>

    <programlisting>device          psm        # PS/2 mouse</programlisting>

    <para>如果您使用的是 PS/2 滑鼠，請開啟。</para>

    <programlisting>device          kbdmux        # keyboard multiplexer</programlisting>

    <para>多重鍵盤的支援。  若不打算同時接多組鍵盤的話，
      那麼移除該行也沒關係。</para>

    <programlisting>device          vga        # VGA video card driver</programlisting>

    <para>顯示卡驅動程式。</para>

    <programlisting>
device          splash     # Splash screen and screen saver support</programlisting>

    <para>開機時顯示啟動畫面！<footnote><para>譯註：Splash screen 指的是帶有 
	  logo、作者、版權聲明等等的啟動畫面。</para></footnote>螢幕保護程式也需
	  要這個選項。</para>

    <programlisting># syscons is the default console driver, resembling an SCO console
device          sc</programlisting>

	<para><literal>sc</literal>是預設的終端機驅動程式，類似 SCO 終端機。大部份
	  的全螢幕程式都是透過終端機資料庫(terminal database library)，例如
	  <filename>termcap</filename>，因此它們不在乎您用的是 <literal>sc</literal>
	  還是相容 <literal>VT220</literal> 的 <literal>vt</literal>。如果您在
	  <literal>sc</literal> 上使用全螢幕的程式遇到麻煩，請在登入後設定 
	  <envar>TERM</envar> 環境變數為 <literal>scoansi</literal>。</para>

    <programlisting># Enable this for the pcvt (VT220 compatible) console driver
#device          vt
#options         XSERVER          # support for X server on a vt console
#options         FAT_CURSOR       # start with block cursor</programlisting>

	<para>這是相容 VT220 的終端機驅動程式，也相容 VT100/102。在某些不相容
	  <literal>sc</literal> 的筆記型電腦上它運作良好。同樣地，登入後請將
	  <envar>TERM</envar> 環境變數設定為 <literal>vt100</literal> 或
	  <literal>vt220</literal>。透過網路連到各種不同的平臺時，這個驅動程式
	  有可能較好用，因為其它作業系統的 <filename>termcap</filename> 或 
	  <filename>terminfo</filename> 可能沒有 <literal>sc</literal> 的資訊，
	  但 <literal>vt100</literal> 理論上所有作業系統都應該要有。

    <programlisting>device          agp</programlisting>

    <para>如果您的系統上有 AGP 介面卡，請加入此選項。除了支援 AGP 外，也支
	  援 AGP GART 的功能。</para>

    <indexterm>
      <primary>APM</primary>
    </indexterm>

    <programlisting># Power management support (see NOTES for more options)
#device          apm</programlisting>

    <para>進階電源管理支援。在筆記型電腦上非常有用，
      但是在 &os; 5.X 及後續版本的預設 kernel 設定檔 <filename>GENERIC</filename>
      中是關閉的。</para>

    <programlisting># Add suspend/resume support for the i8254.
device           pmtimer</programlisting>

    <para>電源管理所需的計時器裝置驅動程式，例如 APM 及 ACPI。</para>

    <programlisting># PCCARD (PCMCIA) support
# PCMCIA and cardbus bridge support
device          cbb               # cardbus (yenta) bridge
device          pccard            # PC Card (16-bit) bus
device          cardbus           # CardBus (32-bit) bus</programlisting>

    <para>PCMCIA 支援，您如果使用筆記型電腦的話，或許會需要它。</para>

    <programlisting># Serial (COM) ports
device          sio               # 8250, 16[45]50 based serial ports</programlisting>

    <para>These are the serial ports referred to as
      <devicename>COM</devicename> ports in the &ms-dos;/&windows;
      world.</para>

    <note>
      <para>If you have an internal modem on <devicename>COM4</devicename>
	and a serial port at <devicename>COM2</devicename>, you will have
	to change the IRQ of the modem to 2 (for obscure technical reasons,
	IRQ2 = IRQ 9) in order to access it
	from &os;.  If you have a multiport serial card, check the
	manual page for &man.sio.4; for more information on the proper
	values to add to your <filename>/boot/device.hints</filename>.
	Some video cards (notably those based on
	S3 chips) use IO addresses in the form of
	<literal>0x*2e8</literal>, and since many cheap serial cards do
	not fully decode the 16-bit IO address space, they clash with
	these cards making the <devicename>COM4</devicename> port
	practically unavailable.</para>

      <para>Each serial port is required to have a unique IRQ (unless you
        are using one of the multiport cards where shared interrupts are
	supported), so the default IRQs for <devicename>COM3</devicename>
	and <devicename>COM4</devicename> cannot be used.</para>
    </note>

    <programlisting># Parallel port
device          ppc</programlisting>

    <para>這是 ISA 匯流排的並列埠介面。</para>

    <programlisting>device          ppbus      # Parallel port bus (required)</programlisting>

    <para>提供並列埠匯流排支援。</para>

    <programlisting>device          lpt        # Printer</programlisting>

    <para>提供並列埠印表機支援。</para>

    <note>
      <para>上面這三項都需要開啟並列埠印表機支援。</para>
    </note>

    <programlisting>device          plip       # TCP/IP over parallel</programlisting>

    <para>提供並列網路介面的驅動程式。</para>

    <programlisting>device          ppi        # Parallel port interface device</programlisting>

    <para>The general-purpose I/O (<quote>geek port</quote>) + IEEE1284
      I/O.</para>

    <programlisting>#device         vpo        # Requires scbus and da</programlisting>

    <indexterm><primary>zip drive</primary></indexterm>
    <para>This is for an Iomega Zip drive.  It requires
      <literal>scbus</literal> and <literal>da</literal> support.  Best
      performance is achieved with ports in EPP 1.9 mode.</para>

    <programlisting>#device         puc</programlisting>

    <para>Uncomment this device if you have a <quote>dumb</quote> serial
      or parallel PCI card that is supported by the &man.puc.4; glue
      driver.</para>

    <programlisting># PCI Ethernet NICs.
device          de         # DEC/Intel DC21x4x (<quote>Tulip</quote>)
device          em         # Intel PRO/1000 adapter Gigabit Ethernet Card
device          ixgb       # Intel PRO/10GbE Ethernet Card
device          txp        # 3Com 3cR990 (<quote>Typhoon</quote>)
device          vx         # 3Com 3c590, 3c595 (<quote>Vortex</quote>)</programlisting>

    <para>Various PCI network card drivers.  Comment out or remove any of
      these not present in your system.</para>

    <programlisting># PCI Ethernet NICs that use the common MII bus controller code.
# NOTE: Be sure to keep the 'device miibus' line in order to use these NICs!
device          miibus     # MII bus support</programlisting>

    <para>MII bus support is required for some PCI 10/100 Ethernet NICs,
      namely those which use MII-compliant transceivers or implement
      transceiver control interfaces that operate like an MII.  Adding
      <literal>device miibus</literal> to the kernel config pulls in
      support for the generic miibus API and all of the PHY drivers,
      including a generic one for PHYs that are not specifically handled
      by an individual driver.</para>

    <programlisting>device          bce        # Broadcom BCM5706/BCM5708 Gigabit Ethernet
device          bfe        # Broadcom BCM440x 10/100 Ethernet
device          bge        # Broadcom BCM570xx Gigabit Ethernet
device          dc         # DEC/Intel 21143 and various workalikes
device          fxp        # Intel EtherExpress PRO/100B (82557, 82558)
device          lge        # Level 1 LXT1001 gigabit ethernet
device          msk        # Marvell/SysKonnect Yukon II Gigabit Ethernet
device          nge        # NatSemi DP83820 gigabit ethernet
device          nve        # nVidia nForce MCP on-board Ethernet Networking
device          pcn        # AMD Am79C97x PCI 10/100 (precedence over 'lnc')
device          re         # RealTek 8139C+/8169/8169S/8110S
device          rl         # RealTek 8129/8139
device          sf         # Adaptec AIC-6915 (<quote>Starfire</quote>)
device          sis        # Silicon Integrated Systems SiS 900/SiS 7016
device          sk         # SysKonnect SK-984x & SK-982x gigabit Ethernet
device          ste        # Sundance ST201 (D-Link DFE-550TX)
device          stge       # Sundance/Tamarack TC9021 gigabit Ethernet
device          ti         # Alteon Networks Tigon I/II gigabit Ethernet
device          tl         # Texas Instruments ThunderLAN
device          tx         # SMC EtherPower II (83c170 <quote>EPIC</quote>)
device          vge        # VIA VT612x gigabit ethernet
device          vr         # VIA Rhine, Rhine II
device          wb         # Winbond W89C840F
device          xl         # 3Com 3c90x (<quote>Boomerang</quote>, <quote>Cyclone</quote>)</programlisting>

    <para>Drivers that use the MII bus controller code.</para>

    <programlisting># ISA Ethernet NICs.  pccard NICs included.
device          cs         # Crystal Semiconductor CS89x0 NIC
# 'device ed' requires 'device miibus'
device          ed         # NE[12]000, SMC Ultra, 3c503, DS8390 cards
device          ex         # Intel EtherExpress Pro/10 and Pro/10+
device          ep         # Etherlink III based cards
device          fe         # Fujitsu MB8696x based cards
device          ie         # EtherExpress 8/16, 3C507, StarLAN 10 etc.
device          lnc        # NE2100, NE32-VL Lance Ethernet cards
device          sn         # SMC's 9000 series of Ethernet chips
device          xe         # Xircom pccard Ethernet

# ISA devices that use the old ISA shims
#device         le</programlisting>

    <para>ISA Ethernet drivers.  See
      <filename>/usr/src/sys/<replaceable>i386</replaceable>/conf/NOTES</filename> for details
of which cards are
      supported by which driver.</para>

    <programlisting># Wireless NIC cards
device          wlan       # 802.11 support</programlisting>

    <para>對 802.11 標準的支援。  若要無線上網，則需加上這行。</para>

    <programlisting>device          wlan_wep        # 802.11 WEP support
device          wlan_ccmp       # 802.11 CCMP support
device          wlan_tkip       # 802.11 TKIP support</programlisting>

    <para>對 802.11 加密設備的支援。  若要安全加密以及 802.11i 安全協定，
      則需加上這行。</para>

    <programlisting>device          an         # Aironet 4500/4800 802.11 wireless NICs.
device          ath             # Atheros pci/cardbus NIC's
device          ath_hal         # Atheros HAL (Hardware Access Layer)
device          ath_rate_sample # SampleRate tx rate control for ath
device          an         # Aironet 4500/4800 802.11 wireless NICs.
device          awi        # BayStack 660 and others
device          ral        # Ralink Technology RT2500 wireless NICs.
device          wi         # WaveLAN/Intersil/Symbol 802.11 wireless NICs.
#device         wl         # Older non 802.11 Wavelan wireless NIC.</programlisting>

    <para>Support for various wireless cards.</para>

    <programlisting># Pseudo devices
device   loop          # Network loopback</programlisting>

    <para>This is the generic loopback device for TCP/IP.  If you telnet
      or FTP to <hostid>localhost</hostid> (a.k.a. <hostid
      role="ipaddr">127.0.0.1</hostid>) it will come back at you through
      this device.  This is <emphasis>mandatory</emphasis>.</para>

    <programlisting>device   random        # Entropy device</programlisting>

    <para>Cryptographically secure random number generator.</para>

    <programlisting>device   ether         # Ethernet support</programlisting>

    <para><literal>ether</literal> is only needed if you have an Ethernet
      card.  It includes generic Ethernet protocol code.</para>

    <programlisting>device   sl            # Kernel SLIP</programlisting>

    <para><literal>sl</literal> is for SLIP support.  This has been almost
      entirely supplanted by PPP, which is easier to set up, better suited
      for modem-to-modem connection, and more powerful.</para>

    <programlisting>device   ppp           # Kernel PPP</programlisting>

    <para>This is for kernel PPP support for dial-up connections.  There
      is also a version of PPP implemented as a userland application that
      uses <literal>tun</literal> and offers more flexibility and features
      such as demand dialing.</para>

    <programlisting>device   tun           # Packet tunnel.</programlisting>

    <para>This is used by the userland PPP software.
      See
      the <link linkend="userppp">PPP</link> section of this book for more
      information.</para>

    <programlisting><anchor id="kernelconfig-ptys">
device   pty           # Pseudo-ttys (telnet etc)</programlisting>

    <para>This is a <quote>pseudo-terminal</quote> or simulated login port.
      It is used by incoming <command>telnet</command> and
      <command>rlogin</command> sessions,
      <application>xterm</application>, and some other applications such
      as <application>Emacs</application>.</para>

    <programlisting>device   md            # Memory <quote>disks</quote></programlisting>

    <para>Memory disk pseudo-devices.</para>

    <programlisting>device   gif           # IPv6 and IPv4 tunneling</programlisting>

    <para>This implements IPv6 over IPv4 tunneling, IPv4 over IPv6 tunneling,
      IPv4 over IPv4 tunneling, and IPv6 over IPv6 tunneling.  The
      <literal>gif</literal> device is
      <quote>auto-cloning</quote>, and will create device nodes as
      needed.</para>

    <programlisting>device   faith         # IPv6-to-IPv4 relaying (translation)</programlisting>

    <para>This pseudo-device captures packets that are sent to it and
      diverts them to the IPv4/IPv6 translation daemon.</para>

    <programlisting># The `bpf' device enables the Berkeley Packet Filter.
# Be aware of the administrative consequences of enabling this!
# Note that 'bpf' is required for DHCP.
device   bpf           # Berkeley packet filter</programlisting>

    <para>This is the Berkeley Packet Filter.  This pseudo-device allows
      network interfaces to be placed in promiscuous mode, capturing every
      packet on a broadcast network (e.g., an Ethernet).  These packets
      can be captured to disk and or examined with the &man.tcpdump.1;
      program.</para>

    <note>
      <para>The &man.bpf.4; device is also used by
	&man.dhclient.8; to obtain the IP address of the default router
	(gateway) and so on.  If you use DHCP, leave this
	uncommented.</para>
    </note>

    <programlisting># USB support
device          uhci          # UHCI PCI-&gt;USB interface
device          ohci          # OHCI PCI-&gt;USB interface
device          ehci          # EHCI PCI-&gt;USB interface (USB 2.0)
device          usb           # USB Bus (required)
#device         udbp          # USB Double Bulk Pipe devices
device          ugen          # Generic
device          uhid          # <quote>Human Interface Devices</quote>
device          ukbd          # Keyboard
device          ulpt          # Printer
device          umass         # Disks/Mass storage - Requires scbus and da
device          ums           # Mouse
device          ural          # Ralink Technology RT2500USB wireless NICs
device          urio          # Diamond Rio 500 MP3 player
device          uscanner      # Scanners
# USB Ethernet, requires mii
device          aue           # ADMtek USB Ethernet
device          axe           # ASIX Electronics USB Ethernet
device          cdce          # Generic USB over Ethernet
device          cue           # CATC USB Ethernet
device          kue           # Kawasaki LSI USB Ethernet
device          rue           # RealTek RTL8150 USB Ethernet</programlisting>

    <para>Support for various USB devices.</para>

    <programlisting># FireWire support
device          firewire      # FireWire bus code
device          sbp           # SCSI over FireWire (Requires scbus and da)
device          fwe           # Ethernet over FireWire (non-standard!)</programlisting>

    <para>Support for various Firewire devices.</para>

    <para>For more information and additional devices supported by
      &os;, see
      <filename>/usr/src/sys/<replaceable>i386</replaceable>/conf/NOTES</filename>.</para>

      <sect2>
        <title>Large Memory Configurations (<acronym>PAE</acronym>)</title>
	<indexterm>
	  <primary>Physical Address Extensions
	    (<acronym>PAE</acronym>)</primary>
	  <secondary>large memory</secondary>
	</indexterm>

	<para>Large memory configuration machines require access to
	  more than the 4 gigabyte limit on User+Kernel Virtual
	  Address (<acronym>KVA</acronym>) space.  Due to this
	  limitation, Intel added support for 36-bit physical address
	  space access in the &pentium; Pro and later line of CPUs.</para>
	
	<para>The Physical Address Extension (<acronym>PAE</acronym>)
	  capability of the &intel; &pentium; Pro and later CPUs
	  allows memory configurations of up to 64 gigabytes.
	  &os; provides support for this capability via the
	  <option>PAE</option> kernel configuration option, available
	  in all current release versions of &os;.  Due to
	  the limitations of the Intel memory architecture, no distinction
	  is made for memory above or below 4 gigabytes.  Memory allocated
	  above 4 gigabytes is simply added to the pool of available
	  memory.</para>

	<para>To enable <acronym>PAE</acronym> support in the kernel,
	  simply add the following line to your kernel configuration
	  file:</para>
	
	<programlisting>options		    PAE</programlisting>

	<note>
	  <para>The <acronym>PAE</acronym> support in &os; is only
	    available for &intel; IA-32 processors.  It should also be
	    noted, that the <acronym>PAE</acronym> support in &os; has
	    not received wide testing, and should be considered beta
	    quality compared to other stable features of &os;.</para>
	</note>

	<para><acronym>PAE</acronym> support in &os; has a few limitations:</para>
	
	<itemizedlist>
	  <listitem>
	    <para>A process is not able to access more than 4
	      gigabytes of VM space.</para>
	  </listitem>

	  <listitem>
	    <para><acronym>KLD</acronym> modules cannot be loaded into
	      a <acronym>PAE</acronym> enabled kernel, due to the
	      differences in the build framework of a module and the
	      kernel.</para>
	  </listitem>

	  <listitem>
	    <para>Device drivers that do not use the &man.bus.dma.9;
	      interface will cause data corruption in a
	      <acronym>PAE</acronym> enabled kernel and are not
	      recommended for use.  For this reason, a
	      <filename>PAE</filename> kernel
	      configuration file is provided in &os; which
	      excludes all drivers not known to work in a <acronym>PAE</acronym> enabled
	      kernel.</para>
	  </listitem>

	  <listitem>
	    <para>Some system tunables determine memory resource usage
	      by the amount of available physical memory.  Such
	      tunables can unnecessarily over-allocate due to the
	      large memory nature of a <acronym>PAE</acronym> system.
	      One such example is the <option>kern.maxvnodes</option>
	      sysctl, which controls the maximum number of vnodes allowed
	      in the kernel.  It is advised to adjust this and other
	      such tunables to a reasonable value.</para>
	  </listitem>

	  <listitem>
	    <para>It might be necessary to increase the kernel virtual
	      address (<acronym>KVA</acronym>) space or to reduce the
	      amount of specific kernel resource that is heavily used
	      (see above) in order to avoid <acronym>KVA</acronym>
	      exhaustion.  The <option>KVA_PAGES</option> kernel option
	      can be used for increasing the
	      <acronym>KVA</acronym> space.</para>
	  </listitem>
	</itemizedlist>

	<para>For performance and stability concerns, it is advised to
	  consult the &man.tuning.7; manual page.  The &man.pae.4;
	  manual page contains up-to-date information on &os;'s
	  <acronym>PAE</acronym> support.</para>
    </sect2>
  </sect1>


  <sect1 id="kernelconfig-trouble">
    <title>If Something Goes Wrong</title>

    <para>There are five categories of trouble that can occur when
      building a custom kernel.  They are:</para>

    <variablelist>
      <varlistentry>
	<term><command>config</command> fails:</term>

	<listitem>
	  <para>If the &man.config.8; command fails when you
	    give it your kernel description, you have probably made a
	    simple error somewhere.  Fortunately,
	    &man.config.8; will print the line number that it
	    had trouble with, so that you can quickly locate the line
	    containing the error.  For example, if you see:</para>

	  <screen>config: line 17: syntax error</screen>

	  <para>Make sure the
	    keyword is typed correctly by comparing it to the
	    <filename>GENERIC</filename> kernel or another
	    reference.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><command>make</command> fails:</term>

	<listitem>
	  <para>If the <command>make</command> command fails, it usually
	    signals an error in your kernel description which is not severe
	    enough for &man.config.8; to catch.  Again, look
	    over your configuration, and if you still cannot resolve the
	    problem, send mail to the &a.questions; with your kernel
	    configuration, and it should be diagnosed quickly.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>kernel 無法開機：<anchor
	  id="kernelconfig-noboot"></term>

	<listitem>
	  <para>如果您的新 kernel 無法開機或無法辨識您的硬體，別慌張！
	    幸運的是，&os; 有一套完美的機制來還原。
	    Simply choose the kernel you want to boot from at
	    the &os; boot loader. You can access this when the system
	    boot menu appears.  Select the <quote>Escape to a loader
            prompt</quote> option, number six.  At the prompt, type
            <command>unload kernel</command>
            and then type
	    <command>boot /boot/<replaceable>kernel.old</replaceable>/kernel</command>,
            or the filename of any other kernel that will boot properly.
            When reconfiguring a kernel, it is always a good idea to keep
            a kernel that is known to work on hand.</para>

	  <para>After booting with a good kernel you can check over your
	    configuration file and try to build it again.  One helpful
	    resource is the <filename>/var/log/messages</filename> file
	    which records, among other things, all of the kernel messages
	    from every successful boot.  Also, the &man.dmesg.8; command
	    will print the kernel messages from the current boot.</para>

	  <note>
	    <para>If you are having trouble building a kernel, make sure
	      to keep a <filename>GENERIC</filename>, or some other kernel
	      that is known to work on hand as a different name that will
	      not get erased on the next build.  You cannot rely on
	      <filename>kernel.old</filename> because when installing a
	      new kernel, <filename>kernel.old</filename> is overwritten
	      with the last installed kernel which may be non-functional.
	      Also, as soon as possible, move the working kernel to the
	      proper <filename class="directory">/boot/kernel</filename>
	      location or commands such
	      as &man.ps.1; may not work properly.  To do this, simply
	      rename the directory containing the good kernel:</para>

	    <screen>&prompt.root; <userinput>mv /boot/kernel /boot/kernel.bad</userinput>
&prompt.root; <userinput>mv /boot/<replaceable>kernel.good</replaceable> /boot/kernel</userinput></screen>


	  </note>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>核心運作正常，但是 &man.ps.1; 卻無法正常運作：</term>

	<listitem>
	  <para>If you have installed a different version of the kernel
	    from the one that the system utilities have been built with,
	    for example, a -CURRENT kernel on a -RELEASE, many system-status
	    commands like &man.ps.1; and &man.vmstat.8; will not work any
	    more.  You should <link linkend="makeworld">recompile and install
	    a world</link> built with the same version of the source tree as
	    your kernel.  This is one reason it is
	    not normally a good idea to use a different version of the
	    kernel from the rest of the operating system.</para>
	</listitem>
      </varlistentry>
    </variablelist>
  </sect1>
</chapter>

<!-- 
     Local Variables:
     mode: sgml
     sgml-declaration: "../chapter.decl"
     sgml-indent-data: t
     sgml-omittag: nil
     sgml-always-quote-attributes: t
     sgml-parent-document: ("../book.sgml" "part" "chapter")
     End:
-->
